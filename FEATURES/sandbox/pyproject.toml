[project]
name = "xarchitecture"
version = "0.1.0"
description = "Enterprise-grade Python architecture framework"
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.5.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "fastapi>=0.104.0",
    "dynaconf>=3.2.0",
    "httpx>=0.25.0",
    "asyncpg>=0.29.0",
    "motor>=3.3.0",
    "redis>=5.0.0",
    "pandas>=2.1.0",
    "openpyxl>=3.1.0",
    "icecream>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "types-redis>=4.6.0",
    "pre-commit>=3.5.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["sandbox"]

[tool.pytest.ini_options]
testpaths = ["sandbox/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    -ra
    --strict-markers
    --cov=src
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
"""
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.ruff]
line-length = 88
target-version = "py312"
fix = true  # Enable autofix by default

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "ASYNC", # flake8-async
    "S", # flake8-bandit (security)
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "N802",  # function name should be lowercase (for test classes)
    "N803",  # argument name should be lowercase (for custom types)
    "S101",  # use of assert (needed for tests)
]

[tool.ruff.lint.per-file-ignores]
"sandbox/tests/*" = ["T20", "S101"]  # Allow print and assert in tests
"sandbox/mock/*" = ["S101"]  # Allow assert in mocks

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]